/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* solve(ListNode* first, ListNode* second)
    {
        // if first list containing only one element then
        if(first->next == NULL) 
        {
          first->next = second;
          return first;
        }

        ListNode* curr1 = first;
        ListNode* next1 = curr1->next;
        ListNode* curr2 = second;
        ListNode* next2 = curr2->next;

        while(next1 != NULL && curr2 != NULL)
        {
            if((curr2->val >= curr1->val) && (curr2->val <= next1->val))
            {
                // this will insert the ordered node between them
                curr1->next = curr2;
                // to keeping the track of second list that not gonna lose so that 
                next2 = curr2->next;  // for don't wanna loose 2nd list track
                curr2->next = next1;

                curr1 = curr2; // this'll poiting to newly added sorted node.
                curr2 = next2; // we've to point curr2 forward
            }
            else
            {
                // if above condition isn't satisfied then just moved pointer forward of list1.
                curr1 = next1;
                next1 = next1->next;

                if(next1 == NULL)
                {
    /* if list1 ended then it's means last 
    node(at which currently curr1 is poiting i.e at last) will be poiting 
    to at where curr2 is. 
    */              curr1->next = curr2; 
                    return first;
                }
            }
        }
        return first;
    }
    ListNode* mergeTwoLists(ListNode* list1, ListNode* list2) {
        if(list1 == NULL) return list2;

        if(list2 == NULL) return list1;

        if(list1->val <= list2->val)
        {
            return solve(list1,list2);
        }
        else
        {
            return solve(list2,list1);
        }
    }
};
